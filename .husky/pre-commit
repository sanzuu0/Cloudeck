#!/usr/bin/env bash
# pre-commit: format & lint staged changes (Go + Frontend) + secret scan
# Bypass once: git commit --no-verify
# shellcheck disable=SC1091
[ -f "$(dirname -- "$0")/_/husky.sh" ] && . "$(dirname -- "$0")/_/husky.sh"
set -euo pipefail

STAGED="$(git diff --name-only --cached --diff-filter=ACMR || true)"
[ -z "$STAGED" ] && exit 0
echo "🔎 pre-commit: checking staged changes…"

# --- Go: format + lint on changed dirs ---
mapfile -t go_files < <(echo "$STAGED" | grep -E '\.go$' || true)
if [ "${#go_files[@]}" -gt 0 ] && command -v go >/dev/null 2>&1; then
  echo "🐹 Go: gofmt…"
  gofmt -l "${go_files[@]}" | tee /tmp/gofmt.out || true
  if [ -s /tmp/gofmt.out ]; then
    mapfile -t fmt_list < /tmp/gofmt.out
    gofmt -w "${fmt_list[@]}"
    git add "${fmt_list[@]}"
    echo "  ↳ formatted & re-staged."
  fi

  if command -v golangci-lint >/dev/null 2>&1; then
    mapfile -t go_dirs < <(printf "%s\n" "${go_files[@]}" | xargs -n1 dirname | sort -u)
    echo "🐹 Go: golangci-lint on ${#go_dirs[@]} dir(s)…"
    golangci-lint run --timeout=3m "${go_dirs[@]}"
  else
    echo "ℹ️ golangci-lint not found → running go vet…"
    go vet ./...
  fi
fi

# --- Frontend: run inside changed app dirs (apps/web, apps/*) ---
mapfile -t fe_changed < <(echo "$STAGED" \
  | grep -E '^(apps/[^/]+/).*\.(jsx?|tsx?|css|scss|json|ya?ml|md|html|mjs|cjs)$' \
  | awk -F/ '{print $1"/"$2}' | sort -u || true)

[ ${#fe_changed[@]} -eq 0 ] && [ -d "apps/web" ] && fe_changed=("apps/web")

for dir in "${fe_changed[@]}"; do
  [ -f "$dir/package.json" ] || continue
  echo "🌐 FE: prettier + lint in $dir …"

  mapfile -t files_in_dir < <(echo "$STAGED" \
    | grep -E "^${dir}/.*\.(jsx?|tsx?|css|scss|json|ya?ml|md|html|mjs|cjs)$" \
    | sed -E "s#^${dir}/##" || true)

  if [ "${#files_in_dir[@]}" -gt 0 ] && command -v npx >/dev/null 2>&1; then
    (cd "$dir" && npx --yes prettier -w "${files_in_dir[@]}") || true
    if [ "${#files_in_dir[@]}" -gt 0 ]; then
      for f in "${files_in_dir[@]}"; do
        git add "$dir/$f"
      done
    fi

  fi

  if [ -f "$dir/package.json" ]; then
    if command -v pnpm >/dev/null 2>&1; then (cd "$dir" && pnpm -s lint) || true
    elif command -v yarn >/dev/null 2>&1; then (cd "$dir" && yarn -s lint) || true
    elif command -v npm  >/dev/null 2>&1; then (cd "$dir" && npm run -s lint --if-present) || true
    fi
  fi
done


# --- Secrets: staged diff scan (if available) ---
if command -v gitleaks >/dev/null 2>&1; then
  echo "🔐 gitleaks (staged)…"
  gitleaks protect --staged --no-banner
else
  echo "ℹ️ gitleaks not found → skipping secret scan."
fi

echo "✅ pre-commit OK"
